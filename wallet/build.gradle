/*
 * This file is part of GNU Taler
 * (C) 2020 Taler Systems S.A.
 *
 * GNU Taler is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3, or (at your option) any later version.
 *
 * GNU Taler is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * GNU Taler; see the file COPYING.  If not, see <http://www.gnu.org/licenses/>
 */

import com.android.build.gradle.tasks.MergeResources

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlinx-serialization"
    id "de.undercouch.download"
}

def walletCoreVersion = "v0.8.2"
def walletCoreSha256 = "185ee051101968fb8e01e8dcc70b2017bbb99c92bc31c97330b2be16baf043e9"

static def versionCodeEpoch() {
    return (new Date().getTime() / 1000).toInteger()
}
def gitCommit = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short=7', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 30
    //noinspection GradleDependency
    buildToolsVersion "$build_tools_version"

    defaultConfig {
        applicationId "net.taler.wallet"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 9
        versionName "v0.8.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "WALLET_CORE_VERSION", "\"$walletCoreVersion\""
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled minify_debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "distributionChannel"
    productFlavors {
        fdroid {
            dimension "distributionChannel"
            applicationIdSuffix ".fdroid"
        }
        google {
            dimension "distributionChannel"
        }
        nightly {
            dimension "distributionChannel"
            applicationIdSuffix ".nightly"
            versionCode versionCodeEpoch()
            versionNameSuffix " ($gitCommit)"
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        // Flag to enable support for the new language APIs for zxing
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding = true
    }

    packagingOptions {
        exclude("META-INF/*.kotlin_module")
    }

    lintOptions {
        abortOnError true
        ignoreWarnings false
        // TODO remove once com.google.android.material fixed this
        //      https://github.com/material-components/material-components-android/issues/504
        ignore "WrongConstant"
    }
}

dependencies {
    implementation project(":taler-kotlin-android")
    implementation project(":anastasis-ui")
    implementation 'net.taler:akono:0.1'

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"

    // Lists and Selection
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0"

    // Navigation Library
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // QR codes
    implementation 'com.journeyapps:zxing-android-embedded:4.0.2@aar'
    // needed to support zxing library in taler-kotlin-android on API < 24
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // Nicer ProgressBar
    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.1'

    // Markdown rendering
    final def markwon_version = '4.6.0'
    implementation "io.noties.markwon:core:$markwon_version"
    implementation "io.noties.markwon:ext-tables:$markwon_version"
    implementation "io.noties.markwon:recycler:$markwon_version"

    testImplementation "junit:junit:$junit_version"
    testImplementation 'org.json:json:20200518'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

def walletLibraryDir = "src/main/assets"
def walletDestFile = "${walletLibraryDir}/taler-wallet-embedded-${walletCoreVersion}.js"
task downloadWalletLibrary(type: Download, dependsOn: preBuild) {
    src "https://git.taler.net/wallet-core.git/plain/${walletCoreVersion}/taler-wallet-embedded.js?h=prebuilt"
    dest walletDestFile
    onlyIfModified true
    overwrite false
    doFirst {
        new File(walletLibraryDir).mkdirs()
        if (!file(dest).exists()) {  // delete old versions before fetching new one
            delete fileTree(walletLibraryDir) {
                include 'taler-wallet-embedded-*.js'
            }
        }
    }
}
task verifyWalletLibrary(type: Verify, dependsOn: downloadWalletLibrary) {
    src walletDestFile
    algorithm 'SHA-256'
    checksum walletCoreSha256
}
tasks.withType(MergeResources) {
    inputs.dir walletLibraryDir
    dependsOn verifyWalletLibrary
}
